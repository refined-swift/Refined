#if !canImport(ObjectiveC)
import XCTest

extension AndTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AndTests = [
        ("testAndCanBeInvalid", testAndCanBeInvalid),
        ("testAndCanBeValid", testAndCanBeValid),
    ]
}

extension CountTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CountTests = [
        ("testCountCanBeInvalid", testCountCanBeInvalid),
        ("testCountCanBeValid", testCountCanBeValid),
    ]
}

extension EmptyTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__EmptyTests = [
        ("testEmptyCanBeInvalid", testEmptyCanBeInvalid),
        ("testEmptyCanBeValid", testEmptyCanBeValid),
        ("testNonEmptyUsesNot", testNonEmptyUsesNot),
    ]
}

extension EqualTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__EqualTests = [
        ("testEqualCanBeInvalid", testEqualCanBeInvalid),
        ("testEqualCanBeValid", testEqualCanBeValid),
    ]
}

extension GreaterEqualTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__GreaterEqualTests = [
        ("testGreaterEqualCanBeInvalid", testGreaterEqualCanBeInvalid),
        ("testGreaterEqualCanBeValid", testGreaterEqualCanBeValid),
    ]
}

extension GreaterTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__GreaterTests = [
        ("testGreaterCanBeInvalid", testGreaterCanBeInvalid),
        ("testGreaterCanBeValid", testGreaterCanBeValid),
    ]
}

extension LessEqualTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LessEqualTests = [
        ("testLessEqualCanBeInvalid", testLessEqualCanBeInvalid),
        ("testLessEqualCanBeValid", testLessEqualCanBeValid),
    ]
}

extension LessTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LessTests = [
        ("testLessCanBeInvalid", testLessCanBeInvalid),
        ("testLessCanBeValid", testLessCanBeValid),
    ]
}

extension LetterTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LetterTests = [
        ("testLetterCanBeInvalid", testLetterCanBeInvalid),
        ("testLetterCanBeValid", testLetterCanBeValid),
        ("testNonLetterUsesNot", testNonLetterUsesNot),
    ]
}

extension LowercaseTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LowercaseTests = [
        ("testLowercaseCanBeInvalid", testLowercaseCanBeInvalid),
        ("testLowercaseCanBeValid", testLowercaseCanBeValid),
        ("testNonLowercaseUsesNot", testNonLowercaseUsesNot),
    ]
}

extension NotTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NotTests = [
        ("testNotCanBeInvalid", testNotCanBeInvalid),
        ("testNotCanBeValid", testNotCanBeValid),
    ]
}

extension NumberTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NumberTests = [
        ("testNonNumberUsesNot", testNonNumberUsesNot),
        ("testNumberCanBeInvalid", testNumberCanBeInvalid),
        ("testNumberCanBeValid", testNumberCanBeValid),
    ]
}

extension OperatorsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__OperatorsTests = [
        ("testDoubleDivision", testDoubleDivision),
        ("testDoubleSubtraction", testDoubleSubtraction),
        ("testIntMultiplication", testIntMultiplication),
        ("testStringConcatenation", testStringConcatenation),
        ("testStringEqual", testStringEqual),
        ("testStringNotEqual", testStringNotEqual),
    ]
}

extension OrTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__OrTests = [
        ("testOrCanBeInvalid", testOrCanBeInvalid),
        ("testOrCanBeValid", testOrCanBeValid),
    ]
}

extension PredicateTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PredicateTests = [
        ("testCheckValueDefaultImplementationThrowsIfNotValid", testCheckValueDefaultImplementationThrowsIfNotValid),
        ("testCheckValueHasDefaultImplementation", testCheckValueHasDefaultImplementation),
    ]
}

extension RefinedTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RefinedTests = [
        ("testRefinedFailableInitCanFail", testRefinedFailableInitCanFail),
        ("testRefinedFailableInitCanSucceed", testRefinedFailableInitCanSucceed),
        ("testRefinedRetrievesCorrectValue", testRefinedRetrievesCorrectValue),
        ("testRefinedThrowingInitCanSucceed", testRefinedThrowingInitCanSucceed),
        ("testRefinedThrowingInitCanThrow", testRefinedThrowingInitCanThrow),
    ]
}

extension UppercaseTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__UppercaseTests = [
        ("testNonUppercaseUsesNot", testNonUppercaseUsesNot),
        ("testUppercaseCanBeInvalid", testUppercaseCanBeInvalid),
        ("testUppercaseCanBeValid", testUppercaseCanBeValid),
    ]
}

extension WhitespaceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__WhitespaceTests = [
        ("testNonWhitespaceUsesNot", testNonWhitespaceUsesNot),
        ("testWhitespaceCanBeInvalid", testWhitespaceCanBeInvalid),
        ("testWhitespaceCanBeValid", testWhitespaceCanBeValid),
    ]
}

extension WrapperTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__WrapperTests = [
        ("testEqualIsWrapped", testEqualIsWrapped),
        ("testGreaterEqualIsWrapped", testGreaterEqualIsWrapped),
        ("testGreaterIsWrapped", testGreaterIsWrapped),
        ("testLessEqualIsWrapped", testLessEqualIsWrapped),
        ("testLessIsWrapped", testLessIsWrapped),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(AndTests.__allTests__AndTests),
        testCase(CountTests.__allTests__CountTests),
        testCase(EmptyTests.__allTests__EmptyTests),
        testCase(EqualTests.__allTests__EqualTests),
        testCase(GreaterEqualTests.__allTests__GreaterEqualTests),
        testCase(GreaterTests.__allTests__GreaterTests),
        testCase(LessEqualTests.__allTests__LessEqualTests),
        testCase(LessTests.__allTests__LessTests),
        testCase(LetterTests.__allTests__LetterTests),
        testCase(LowercaseTests.__allTests__LowercaseTests),
        testCase(NotTests.__allTests__NotTests),
        testCase(NumberTests.__allTests__NumberTests),
        testCase(OperatorsTests.__allTests__OperatorsTests),
        testCase(OrTests.__allTests__OrTests),
        testCase(PredicateTests.__allTests__PredicateTests),
        testCase(RefinedTests.__allTests__RefinedTests),
        testCase(UppercaseTests.__allTests__UppercaseTests),
        testCase(WhitespaceTests.__allTests__WhitespaceTests),
        testCase(WrapperTests.__allTests__WrapperTests),
    ]
}
#endif
