% import csv
% source = '../../Resources/PredicateValue.csv'
%{
def buildOperator(type):
  if type == "protocol":
    return ":"
  else:
    return " =="
}%
% warning = 'Generated with gyb. Do not edit.'
// ${warning}

import Features
% import csv
% source = '../../Resources/Properties.csv'
% with open(source) as file:
%   for row in csv.DictReader(file):
%     predicate = row['Predicate name']
%     value = row['Value equivalence']
%     constraint = row['Constraint protocol']
%     protocol = row['Feature protocol']

public typealias _${predicate}Predicate = ${predicate}

%     if constraint == '':
extension ${protocol} {
    public typealias ${predicate} = Refined<_${predicate}Predicate<Self>>
    public typealias Non${predicate} = Refined<_${predicate}Predicate<Self>>._Not
}

extension Refined.And where Refined.Value: ${protocol} {
    public typealias ${predicate} = Refined._And<_${predicate}Predicate<Refined.Value>>
    public typealias Non${predicate} = Refined._And<${predicate}._Not>
}

extension Refined.Or where Refined.Value: ${protocol} {
    public typealias ${predicate} = Refined._Or<_${predicate}Predicate<Refined.Value>>
    public typealias Non${predicate} = Refined._Or<${predicate}._Not>
}
%     elif value == '':
extension ${protocol} {
    public typealias ${predicate}<T: ${constraint}> = Refined<_${predicate}Predicate<T>> where T.Value == Self
}

extension Refined.And where Refined.Value: ${protocol} {
     public typealias ${predicate}<T: ${constraint}> = Refined._And<_${predicate}Predicate<T>> where T.Value == Refined.Value
}

extension Refined.Or where Refined.Value: ${protocol} {
    public typealias ${predicate}<T: ${constraint}> = Refined._Or<_${predicate}Predicate<T>> where T.Value == Refined.Value
}
%     else:
extension ${protocol} {
    public typealias ${predicate}<T: ${constraint}> = Refined<_${predicate}Predicate<Self, T>> where T.Value == ${value}
}

extension Refined.And where Refined.Value: ${protocol} {
    public typealias ${predicate}<T: ${constraint}> = Refined._And<_${predicate}Predicate<Refined.Value, T>> where T.Value == ${value}
}

extension Refined.Or where Refined.Value: ${protocol} {
public typealias ${predicate}<T: ${constraint}> = Refined._Or<_${predicate}Predicate<Refined.Value, T>> where T.Value == ${value}
}
%     end
%   end
% end
