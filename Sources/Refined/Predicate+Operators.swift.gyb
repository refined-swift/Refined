% import json
% source = '../../Resources/Operators.json'
% warning = 'Generated with gyb. Do not edit.'
// ${warning}

import Wrapper
% with open(source) as file:
%   for feature in json.load(file):
%     returnType = feature['returnType']
%     signature = feature['signature']
%     parameters = 2 if signature.find('rhs') >= 0 else 1
%     if returnType == 'Bool' and parameters == 2:
%       protocol = feature['featureName']
%       predicate = protocol[:-10]
%       callName = feature['callName']
%       available = feature['available']
%       attribute = available + '\n    ' if available else ''
%       docName = predicate[0].lower() + predicate[1:]

// MARK: - ${predicate}

/// Predicate that checks if a value is *${docName}* compared to `PredicateValue`.
${attribute}public struct ${predicate}<V: PredicateValue>: Predicate where V.Value: ${protocol} {
    @available(*, unavailable)
    private init() {}

    public static func isValid(value lhs: V.Value) -> Bool {
        return lhs ${callName} V.value
    }
}

/// Refined's internal typealias of `${predicate}`.
${attribute}public typealias _${predicate}Predicate = ${predicate}

/// `${predicate}` DSL extension.
${attribute}extension ${protocol} {
    public typealias ${predicate}<T: PredicateValue> = Refined<_${predicate}Predicate<T>> where T.Value == Self
}

/// `And` + `${predicate}` DSL extension.
extension Refined.And where Refined.Value: ${protocol} {
    public typealias ${predicate}<T: PredicateValue> = Refined._And<_${predicate}Predicate<T>> where T.Value == Refined.Value
}

/// `Or` + `${predicate}` DSL extension.
extension Refined.Or where Refined.Value: ${protocol} {
    public typealias ${predicate}<T: PredicateValue> = Refined._Or<_${predicate}Predicate<T>> where T.Value == Refined.Value
}
%       end
%     end
%   end
% end
